snippet _main package main
  package main

  import "fmt"

  func main() {
    fmt.Println("Hello Golang!")
  }

#---------------------------------
# 例外処理
#---------------------------------
snippet _ifep "if err != nil -> panic"
  if err != nil {
    panic(err)
  }

snippet _ifer "if err != nil -> return nil, err"
  if err != nil {
    return nil, err
  }

#---------------------------------
# Printデバッグ
#---------------------------------
snippet _fp "fmt.Println"
  fmt.Println("${0}")

snippet _fpv "fmt.Printf"
  fmt.Printf("${0} = %#v\n", ${0})

snippet _fps "fmt.Printf"
  fmt.Printf("${0} = %s\n", ${0})

snippet _logt "log.Println 👺"
  log.Println("👺${0}")

snippet _logv "log.Printf(%#v)"
  log.Printf("👺%#v\n", ${0})

#---------------------------------
# 定義
#---------------------------------
snippet :: "var := foo"
  ${1:id} := ${0}

snippet _func "func hoge() fuga {}"
  func ${1:functionName}(${2:arg1 int, arg2 string}) ${3:(string, error)} {
    ${0:// FIXME: 実装}
  }

snippet _struct "type struct"
  type ${1:TypeName} struct {
    ${0:PropName string}
  }

snippet _slice "slice"
  []${1:TypeName}{${0:1, 2}}

snippet _enum "enum"
  type ${1:EnumName} int
  const (
    ${2:ConstVar1} ${1:EnumName} = iota
    ${0:ConstVar2}
  )

#---------------------------------
# 制御構文
#---------------------------------
snippet _forr "for range"
  for _, ${2:v} := range ${1:values} {
    ${0:// FIXME: 実装}
  }

snippet _fori "for i"
  for i := 0; i < len(${1:values}); i++ {
    ${0:// FIXME: 実装}
  }

snippet _switch "switch"
  switch ${1:value} {
  case ${2:ConstVar1}:
    ${0:// FIXME: 実装}
  default:
    ${0:// FIXME: 実装}
  }

#---------------------------------
# Annotation
#---------------------------------
snippet _json "`json:\"prop\"`"
  \`json:"${0:propName}"\`

