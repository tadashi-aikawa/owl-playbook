# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

extends typescript

snippet _script "<script setup>" b
  <script setup lang="ts">
  ${1}
  </script>

snippet _template "<template>" b
  <template>
  ${1}
  </template>

snippet _props "props定義" b
  defineProps<{
    ${1}: ${2}
  }>();

snippet _iprops "interfaceつきprops定義" b
  interface Props {
    ${1}
  }
  const props = defineProps<Props>();

snippet _props_default "props定義 defaultつき" b
  interface Props {
    ${1}
  }
  const props = withDefaults(defineProps<Props>(), {
    ${2}
  });

snippet _template_refs "Template Refs" b
  const ${1:element} = ref<InstanceType<typeof ${2:Component}> | null>(null);
  // Add -> <${2} ref="${1}" />

snippet _state "state定義" b
  interface State {
    ${1}
  }
  const state = reactive<State>({
    ${2}
  });

snippet _ignore-organize-imports "// organize-imports-ignore"
  // organize-imports-ignore
