snippet _cl console.log()
  console.log(${0})

snippet _clt console.log(üë∫)
  console.log("üë∫ ${0}")

snippet _doc "Èñ¢Êï∞„ÅÆdoc Á∞°ÊòìÁâà"
  /**
   * ${1:description}
   */

snippet _docd "Èñ¢Êï∞„ÅÆdoc Ë©≥Á¥∞Áâà"
  /**
   * ${1:description}
   *
   * \`\`\`ts
   * ${2:example}
   * \`\`\`
   */

snippet _buntestimport "Description" b
  import { describe, test, expect } from "bun:test";

snippet _test "test„Ç≥„Éº„Éâ" b
  test("${1:test name}", () => {
    expect(${2:actual}).toBe(${3:expected});
  });

snippet _forof "for each"
  for (const ${2} of ${1}) {
    ${3}
  }

snippet _fori "for i"
  for (let i = 0; i < ${1}; i++) {
    ${2}
  }

snippet _exfunction "export function"
  export function ${1}(${2})${3} {
    ${4}
  }

snippet _allowfunction "allow function"
  (${1}) => { ${2} }

snippet _switch "switch"
  switch ($1) {
    case $2:
      break;
    default:
      throw new ExhaustiveError($1);
  }

snippet _exhaustiveError "ExhaustiveError"
  export class ExhaustiveError extends Error {
    constructor(value: never, message = \`Unsupported type: \${value}\`) {
      super(message);
    }
  }

# -----------------------------------
# Vue„Åß„ÇÇ‰Ωø„ÅÜ„ÇÑ„Å§
# -----------------------------------

snippet _emit "emitÂÆöÁæ©" b
  const emit = defineEmits<{
    "${1:click}": [${2:key}: ${3:any}]
  }>();

snippet _computed "computed" b
  const ${1} = computed(() => ${2})

snippet _ref "ref" b
  const ${1} = ref(${2})

snippet _reactive "reactive" b
  const ${1} = reactive({
    ${2}: ${3}
  })

snippet _model "defineModel" b
  const ${1} = defineModel<${2:T}>({required: true})

snippet _model_named "defineModel named" b
  const ${1} = defineModel<${2:T}>("${3:modelName}", {required: true})

snippet _watch "watch" b
  watch(
    () => ${1},
    (${2}) => {
      ${3}
    }
  )


