[[plugins]]
# Nim
repo = 'zah/nim.vim'
on_ft = ['nim']
hook_add = '''
fun! JumpToDef()
  if exists("*GotoDefinition_" . &filetype)
    call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endf

" Jump to tag
nn <M-g> :call JumpToDef()<cr>
ino <M-g> <esc>:call JumpToDef()<cr>i
'''

#-----------------
# Markdown
#-----------------

[[plugins]]
# テーブルフォーマットに必要
repo = 'godlygeek/tabular'

[[plugins]]
# Markdown
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
depends = ['tabular']
# リストインデントはスペース何コ分か
hook_add = 'let g:vim_markdown_new_list_item_indent = 2'


#-----------------
# Syntax
#-----------------

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']


#-----------------
# ALE
#-----------------

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['sh', 'python', 'rust', 'nim', 'go']
hook_add = '''
" エラー行に表示するマーク
let g:ale_sign_error = '☠'
let g:ale_sign_warning = '⚠'
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 変更がある度に更新されるとチカチカするのでOFF
let g:ale_lint_on_text_changed = 'never'

" fixerを有効に
let g:ale_fixers = {
\   'rust': ['rustfmt'],
\}
" ファイルを保存したときにfixer実行
let g:ale_fix_on_save = 1

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 1
let g:ale_keep_list_window_open = 0
" ウィンドウサイズ
let g:ale_list_window_size = 5


" <<<<<  ALE ====> python  >>>>>>

" pycodestyleのバグ修正がリリースされれば... (https://github.com/PyCQA/pycodestyle/issues/682)
let g:ale_python_flake8_args = '--max-line-length=140 --ignore=W391,E402,E701,E704,E131,E128,E124'
" importエラーは無視 https://github.com/python/mypy/issues/3905
let g:ale_python_mypy_options = '--ignore-missing-imports'
'''


#-----------------
# LSP
#-----------------

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['sh', 'python', 'rust']
hook_add = '''
" ---------------------------------------------------
" lsp (Use pipenv shell)
" ---------------------------------------------------
if executable('pyls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'Pipfile'))},
        \ 'whitelist': ['python'],
        \ })
endif

if executable('bash-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->['bash-language-server', 'start']},
        \ 'whitelist': ['sh'],
        \ })
endif

if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
        \ 'whitelist': ['rust'],
        \ })
endif
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'


